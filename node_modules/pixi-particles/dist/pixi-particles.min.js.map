{"version":3,"sources":["../src/PropertyNode.ts","../src/ParticleUtils.ts","../src/PropertyList.ts","../src/Particle.ts","../src/Emitter.ts","../src/PolygonalChain.ts","../src/PathParticle.ts","../src/AnimatedParticle.ts"],"names":["PropertyNode","value","time","ease","this","next","isStepped","ParticleUtils","generateEase","createList","data","array","list","node","first","_a","hexToRGB","length","i","_b","value_1","time_1","start","end","verbose","DEG_TO_RADS","Math","PI","rotatePoint","angle","p","s","sin","c","cos","xnew","x","y","ynew","combineRGBComponents","r","g","b","normalize","point","oneOverLen","scaleBy","sqrt","color","output","alpha","charAt","substr","indexOf","parseInt","a","segments","qty","oneOverQty","t","cp","e","getBlendMode","name","BLEND_MODES","NORMAL","toUpperCase","replace","createSteppedGradient","numSteps","currentNode","current","nextIndex","lerp","curVal","nextVal","PropertyList","isColor","interpolate","prototype","reset","intColorSimple","intValueSimple","intColorStepped","intValueStepped","intColorComplex","intValueComplex","ticker","Particle","_super","emitter","_this","call","anchor","velocity","Point","rotationSpeed","rotationAcceleration","maxLife","age","extraData","alphaList","speedList","speedMultiplier","acceleration","maxSpeed","NaN","scaleList","scaleMultiplier","colorList","_doAlpha","_doScale","_doSpeed","_doAcceleration","_doColor","_doNormalMovement","_oneOverLife","prev","init","Particle_init","update","Particle_update","Sprite_destroy","destroy","Particle_destroy","applyArt","kill","tslib_1.__extends","rotation","noRotation","scale","tint","visible","art","texture","Texture","EMPTY","delta","deltaX","deltaY","speed","oldVX","oldVY","currentSpeed","position","newRotationSpeed","atan2","recycle","parent","removeChild","parseArt","fromImage","baseTexture","window","console","warn","parseData","Sprite","PolygonalChain","countingLengths","totalLength","Array","isArray","chain","prevPoint","j","second","push","p1","p2","l","segLength","getRandomPoint","out","chosenSeg","rand","random","pixiNS","pixi","exec","pixi.VERSION","shared","Ticker","helperPoint","Emitter","particleParent","particleImages","config","_particleConstructor","startAlpha","startSpeed","minimumSpeedMultiplier","startScale","minimumScaleMultiplier","startColor","minLifetime","maxLifetime","minStartRotation","maxStartRotation","minRotationSpeed","maxRotationSpeed","particleBlendMode","customEase","_frequency","spawnChance","maxParticles","emitterLifetime","spawnPos","spawnType","_spawnFunc","spawnRect","spawnCircle","spawnPolygonalChain","particlesPerWave","particleSpacing","angleStart","ownerPos","_prevEmitterPos","_prevPosIsValid","_posChanged","_parent","addAtBack","particleCount","_emit","_spawnTimer","_emitterLife","_activeParticlesFirst","_activeParticlesLast","_poolFirst","_origConfig","_origArt","_autoUpdate","_destroyWhenComplete","_completeCallback","rotate","updateSpawnPos","updateOwnerPos","Object","defineProperty","cleanup","particle","slice","partClass","startRotation","min","max","lifetime","blendMode","parseSpawnType","frequency","pos","initAdditional","clone","emit","undefined","autoUpdate","_spawnRect","Rectangle","w","h","_spawnCircle","Circle","_spawnRing","minRadius","minR","_spawnBurst","_spawnPoint","_spawnPolygonalChain","spawnPolygon","newRot","diff","resetPositionTracking","remove","add","playOnceAndDestroy","callback","playOnce","settings","TARGET_FPMS","prevX","prevY","curX","curY","emitPosX","emitPosY","len","particleConstructor","floor","applyAdditionalProperties","children","shift","pop","index","splice","unshift","addChildAt","addChild","cb","width","height","radius","MATH_FUNCS","WHITELISTER","RegExp","concat","join","PathParticle","path","initialRotation","initialPosition","movement","pathString","matches","match","Function","parsePath","error","AnimatedParticle","textures","duration","framerate","elapsed","loop","frame","tex","outTextures","outArr","dupe","count"],"mappings":"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","file":"dist/pixi-particles.min.js.map","sourcesContent":["import {ParticleUtils, EaseSegment, SimpleEase, Color} from \"./ParticleUtils\";\nimport {BasicTweenable} from \"./EmitterConfig\";\n\nexport interface ValueStep<T> {\n\tvalue:T;\n\ttime:number;\n}\n\nexport interface ValueList<T> {\n\tlist: ValueStep<T>[],\n\tisStepped?: boolean;\n\tease?: SimpleEase|EaseSegment[];\n}\n/**\n * A single node in a PropertyList.\n */\nexport class PropertyNode<V>\n{\n\t/**\n\t * Value for the node.\n\t */\n\tpublic value: V;\n\t/**\n\t * Time value for the node. Between 0-1.\n\t */\n\tpublic time: number;\n\t/**\n\t * The next node in line.\n\t */\n\tpublic next: PropertyNode<V>;\n\t/**\n\t * If this is the first node in the list, controls if the entire list is stepped or not.\n\t */\n\tpublic isStepped: boolean;\n\tpublic ease: SimpleEase;\n\t\n\t/**\n\t * @param value The value for this node\n\t * @param time The time for this node, between 0-1\n\t * @param [ease] Custom ease for this list. Only relevant for the first node.\n\t */\n\tconstructor(value: V, time:number, ease?: SimpleEase|EaseSegment[])\n\t{\n\t\tthis.value = value;\n\t\tthis.time = time;\n\t\tthis.next = null;\n\t\tthis.isStepped = false;\n\t\tif (ease)\n\t\t{\n\t\t\tthis.ease = typeof ease == \"function\" ? ease : ParticleUtils.generateEase(ease);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.ease = null;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a list of property values from a data object {list, isStepped} with a list of objects in\n\t * the form {value, time}. Alternatively, the data object can be in the deprecated form of\n\t * {start, end}.\n\t * @param data The data for the list.\n\t * @param data.list The array of value and time objects.\n\t * @param data.isStepped If the list is stepped rather than interpolated.\n\t * @param data.ease Custom ease for this list.\n\t * @return The first node in the list\n\t */\n\tpublic static createList<T extends (string|number)>(data: ValueList<T>|BasicTweenable<T>):PropertyNode<T extends string ? Color : T>\n\t{\n\t\tif (\"list\" in data)\n\t\t{\n\t\t\tlet array = data.list;\n\t\t\tlet node, first;\n\t\t\tconst {value, time} = array[0];\n\t\t\tfirst = node = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time, data.ease);\n\t\t\t//only set up subsequent nodes if there are a bunch or the 2nd one is different from the first\n\t\t\tif (array.length > 2 || (array.length === 2 && array[1].value !== value))\n\t\t\t{\n\t\t\t\tfor (let i = 1; i < array.length; ++i)\n\t\t\t\t{\n\t\t\t\t\tconst {value, time} = array[i];\n\t\t\t\t\tnode.next = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time);\n\t\t\t\t\tnode = node.next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfirst.isStepped = !!data.isStepped;\n\t\t\treturn first as PropertyNode<T extends string ? Color : T>;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//Handle deprecated version here\n\t\t\tlet start = new PropertyNode(typeof data.start === 'string' ? ParticleUtils.hexToRGB(data.start) : data.start, 0);\n\t\t\t//only set up a next value if it is different from the starting value\n\t\t\tif (data.end !== data.start)\n\t\t\t\tstart.next = new PropertyNode(typeof data.end === 'string' ? ParticleUtils.hexToRGB(data.end) : data.end, 1);\n\t\t\treturn start as PropertyNode<T extends string ? Color : T>;\n\t\t}\n\t}\n}","import {BLEND_MODES, Point} from 'pixi.js';\nimport {PropertyNode, ValueStep} from './PropertyNode';\n\nexport interface Color {\n\tr: number,\n\tg: number,\n\tb: number,\n\ta?: number\n}\n\nexport interface EaseSegment {\n\tcp:number;\n\ts:number;\n\te:number;\n}\n\nexport type SimpleEase = (time:number) => number;\n\n/**\n * Contains helper functions for particles and emitters to use.\n */\nexport namespace ParticleUtils {\n\t/**\n\t * If errors and warnings should be logged within the library.\n\t */\n\texport let verbose = false;\n\n\texport const DEG_TO_RADS = Math.PI / 180;\n\n\t/**\n\t * Rotates a point by a given angle.\n\t * @param angle The angle to rotate by in degrees\n\t * @param p The point to rotate around 0,0.\n\t */\n\texport function rotatePoint(angle:number, p:Point)\n\t{\n\t\tif (!angle) return;\n\t\tangle *= ParticleUtils.DEG_TO_RADS;\n\t\tconst s = Math.sin(angle);\n\t\tconst c = Math.cos(angle);\n\t\tconst xnew = p.x * c - p.y * s;\n\t\tconst ynew = p.x * s + p.y * c;\n\t\tp.x = xnew;\n\t\tp.y = ynew;\n\t}\n\n\t/**\n\t * Combines separate color components (0-255) into a single uint color.\n\t * @param r The red value of the color\n\t * @param g The green value of the color\n\t * @param b The blue value of the color\n\t * @return The color in the form of 0xRRGGBB\n\t */\n\texport function combineRGBComponents(r:number, g:number, b:number/*, a*/): number\n\t{\n\t\treturn /*a << 24 |*/ r << 16 | g << 8 | b;\n\t}\n\n\t/**\n\t * Reduces the point to a length of 1.\n\t * @param point The point to normalize\n\t */\n\texport function normalize(point:Point): void\n\t{\n\t\tlet oneOverLen = 1 / ParticleUtils.length(point);\n\t\tpoint.x *= oneOverLen;\n\t\tpoint.y *= oneOverLen;\n\t}\n\n\t/**\n\t * Multiplies the x and y values of this point by a value.\n\t * @param point The point to scaleBy\n\t * @param value The value to scale by.\n\t */\n\texport function scaleBy(point:Point, value:number): void\n\t{\n\t\tpoint.x *= value;\n\t\tpoint.y *= value;\n\t}\n\n\t/**\n\t * Returns the length (or magnitude) of this point.\n\t * @param point The point to measure length\n\t * @return The length of this point.\n\t */\n\texport function length(point:Point): number\n\t{\n\t\treturn Math.sqrt(point.x * point.x + point.y * point.y);\n\t}\n\n\t/**\n\t * Converts a hex string from \"#AARRGGBB\", \"#RRGGBB\", \"0xAARRGGBB\", \"0xRRGGBB\",\n\t * \"AARRGGBB\", or \"RRGGBB\" to an object of ints of 0-255, as\n\t * {r, g, b, (a)}.\n\t * @param color The input color string.\n\t * @param output An object to put the output in. If omitted, a new object is created.\n\t * @return The object with r, g, and b properties, possibly with an a property.\n\t */\n\texport function hexToRGB(color:string, output?:Color): Color\n\t{\n\t\tif (!output)\n\t\t\toutput = {} as Color;\n\t\tif (color.charAt(0) == \"#\")\n\t\t\tcolor = color.substr(1);\n\t\telse if (color.indexOf(\"0x\") === 0)\n\t\t\tcolor = color.substr(2);\n\t\tlet alpha;\n\t\tif (color.length == 8)\n\t\t{\n\t\t\talpha = color.substr(0, 2);\n\t\t\tcolor = color.substr(2);\n\t\t}\n\t\toutput.r = parseInt(color.substr(0, 2), 16);//Red\n\t\toutput.g = parseInt(color.substr(2, 2), 16);//Green\n\t\toutput.b = parseInt(color.substr(4, 2), 16);//Blue\n\t\tif (alpha)\n\t\t\toutput.a = parseInt(alpha, 16);\n\t\treturn output;\n\t}\n\n\t/**\n\t * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\n\t * by the related tool at http://www.greensock.com/customease/.\n\t * @param segments An array of segments, as created by\n\t * http://www.greensock.com/customease/.\n\t * @return A function that calculates the percentage of change at\n\t *                    a given point in time (0-1 inclusive).\n\t */\n\texport function generateEase(segments:EaseSegment[]): SimpleEase\n\t{\n\t\tconst qty = segments.length;\n\t\tconst oneOverQty = 1 / qty;\n\t\t/*\n\t\t * Calculates the percentage of change at a given point in time (0-1 inclusive).\n\t\t * @param {Number} time The time of the ease, 0-1 inclusive.\n\t\t * @return {Number} The percentage of the change, 0-1 inclusive (unless your\n\t\t *                  ease goes outside those bounds).\n\t\t */\n\t\treturn function(time:number)\n\t\t{\n\t\t\tlet t: number, s: EaseSegment;\n\t\t\tlet i = (qty * time) | 0;//do a quick floor operation\n\t\t\tt = (time - (i * oneOverQty)) * qty;\n\t\t\ts = segments[i] || segments[qty - 1];\n\t\t\treturn (s.s + t * (2 * (1 - t) * (s.cp - s.s) + t * (s.e - s.s)));\n\t\t};\n\t}\n\n\t/**\n\t * Gets a blend mode, ensuring that it is valid.\n\t * @param name The name of the blend mode to get.\n\t * @return The blend mode as specified in the PIXI.BLEND_MODES enumeration.\n\t */\n\texport function getBlendMode(name:string): number\n\t{\n\t\tif (!name) return BLEND_MODES.NORMAL;\n\t\tname = name.toUpperCase();\n\t\twhile (name.indexOf(\" \") >= 0)\n\t\t\tname = name.replace(\" \", \"_\");\n\t\treturn (BLEND_MODES as any)[name] || BLEND_MODES.NORMAL;\n\t}\n\n\t/**\n\t * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\n\t * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\n\t * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\n\t * @param list The list of data to convert.\n\t * @param [numSteps=10] The number of steps to use.\n\t * @return The blend mode as specified in the PIXI.blendModes enumeration.\n\t */\n\texport function createSteppedGradient(list:ValueStep<string>[], numSteps:number = 10) {\n\t\tif (typeof numSteps !== 'number' || numSteps <= 0)\n\t\t\tnumSteps = 10;\n\t\tlet first = new PropertyNode<Color>(ParticleUtils.hexToRGB(list[0].value), list[0].time);\n\t\tfirst.isStepped = true;\n\t\tlet currentNode = first;\n\t\tlet current = list[0];\n\t\tlet nextIndex = 1;\n\t\tlet next = list[nextIndex];\n\t\tfor (let i = 1; i < numSteps; ++i)\n\t\t{\n\t\t\tlet lerp = i / numSteps;\n\t\t\t//ensure we are on the right segment, if multiple\n\t\t\twhile (lerp > next.time)\n\t\t\t{\n\t\t\t\tcurrent = next;\n\t\t\t\tnext = list[++nextIndex];\n\t\t\t}\n\t\t\t//convert the lerp value to the segment range\n\t\t\tlerp = (lerp - current.time) / (next.time - current.time);\n\t\t\tlet curVal = ParticleUtils.hexToRGB(current.value);\n\t\t\tlet nextVal = ParticleUtils.hexToRGB(next.value);\n\t\t\tlet output:Color = {\n\t\t\t\tr: (nextVal.r - curVal.r) * lerp + curVal.r,\n\t\t\t\tg: (nextVal.g - curVal.g) * lerp + curVal.g,\n\t\t\t\tb: (nextVal.b - curVal.b) * lerp + curVal.b,\n\t\t\t};\n\t\t\tcurrentNode.next = new PropertyNode(output, i / numSteps);\n\t\t\tcurrentNode = currentNode.next;\n\t\t}\n\t\t//we don't need to have a PropertyNode for time of 1, because in a stepped version at that point\n\t\t//the particle has died of old age\n\t\treturn first;\n\t}\n}","import {ParticleUtils, SimpleEase, Color} from \"./ParticleUtils\";\nimport {PropertyNode} from \"./PropertyNode\";\n\n/**\n * Singly linked list container for keeping track of interpolated properties for particles.\n * Each Particle will have one of these for each interpolated property.\n */\nexport class PropertyList<V>\n{\n\t/**\n\t * The current property node in the linked list.\n\t */\n\tpublic current: PropertyNode<V>;\n\t/**\n\t * The next property node in the linked list. Stored separately for slightly less variable\n\t * access.\n\t */\n\tpublic next: PropertyNode<V>;\n\t/**\n\t * Calculates the correct value for the current interpolation value. This method is set in\n\t * the reset() method.\n\t * @param lerp The interpolation value from 0-1.\n\t * @return The interpolated value. Colors are converted to the hex value.\n\t */\n\tpublic interpolate: (lerp:number)=>number;\n\t/**\n\t * A custom easing method for this list.\n\t * @param lerp The interpolation value from 0-1.\n\t * @return The eased value, also from 0-1.\n\t */\n\tpublic ease: SimpleEase;\n\t/**\n\t * If this list manages colors, which requires a different method for interpolation.\n\t */\n\tprivate isColor: boolean;\n\t\n    /**\n     * @param isColor If this list handles color values\n     */\n\tconstructor(isColor: boolean = false)\n\t{\n\t\tthis.current = null;\n\t\tthis.next = null;\n\t\tthis.isColor = !!isColor;\n\t\tthis.interpolate = null;\n\t\tthis.ease = null;\n\t}\n\n\t/**\n\t * Resets the list for use.\n\t * @param first The first node in the list.\n\t * @param first.isStepped If the values should be stepped instead of interpolated linearly.\n\t */\n\tpublic reset(first: PropertyNode<V>)\n\t{\n\t\tthis.current = first;\n\t\tthis.next = first.next;\n\t\tconst isSimple = this.next && this.next.time >= 1;\n\t\tif (isSimple)\n\t\t{\n\t\t\tthis.interpolate = this.isColor ? intColorSimple : intValueSimple;\n\t\t}\n\t\telse if (first.isStepped)\n\t\t{\n\t\t\tthis.interpolate = this.isColor ? intColorStepped : intValueStepped;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.interpolate = this.isColor ? intColorComplex : intValueComplex;\n\t\t}\n\t\tthis.ease = this.current.ease;\n\t}\n}\n\nfunction intValueSimple(this: PropertyList<number>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\treturn (this.next.value - this.current.value) * lerp + this.current.value;\n}\n\nfunction intColorSimple(this: PropertyList<Color>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\tlet curVal = this.current.value, nextVal = this.next.value;\n\tlet r = (nextVal.r - curVal.r) * lerp + curVal.r;\n\tlet g = (nextVal.g - curVal.g) * lerp + curVal.g;\n\tlet b = (nextVal.b - curVal.b) * lerp + curVal.b;\n\treturn ParticleUtils.combineRGBComponents(r, g, b);\n}\n\nfunction intValueComplex(this: PropertyList<number>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\t//make sure we are on the right segment\n\twhile (lerp > this.next.time)\n\t{\n\t\tthis.current = this.next;\n\t\tthis.next = this.next.next;\n\t}\n\t//convert the lerp value to the segment range\n\tlerp = (lerp - this.current.time) / (this.next.time - this.current.time);\n\treturn (this.next.value - this.current.value) * lerp + this.current.value;\n}\n\nfunction intColorComplex(this: PropertyList<Color>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\t//make sure we are on the right segment\n\twhile (lerp > this.next.time)\n\t{\n\t\tthis.current = this.next;\n\t\tthis.next = this.next.next;\n\t}\n\t//convert the lerp value to the segment range\n\tlerp = (lerp - this.current.time) / (this.next.time - this.current.time);\n\tlet curVal = this.current.value, nextVal = this.next.value;\n\tlet r = (nextVal.r - curVal.r) * lerp + curVal.r;\n\tlet g = (nextVal.g - curVal.g) * lerp + curVal.g;\n\tlet b = (nextVal.b - curVal.b) * lerp + curVal.b;\n\treturn ParticleUtils.combineRGBComponents(r, g, b);\n}\n\nfunction intValueStepped(this: PropertyList<number>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\t//make sure we are on the right segment\n\twhile (this.next && lerp > this.next.time)\n\t{\n\t\tthis.current = this.next;\n\t\tthis.next = this.next.next;\n\t}\n\treturn this.current.value;\n}\n\nfunction intColorStepped(this: PropertyList<Color>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\t//make sure we are on the right segment\n\twhile (this.next && lerp > this.next.time)\n\t{\n\t\tthis.current = this.next;\n\t\tthis.next = this.next.next;\n\t}\n\tlet curVal = this.current.value;\n\treturn ParticleUtils.combineRGBComponents(curVal.r, curVal.g, curVal.b);\n}","import {Emitter} from \"./Emitter\";\nimport {ParticleUtils, SimpleEase, Color} from \"./ParticleUtils\";\nimport {PropertyList} from \"./PropertyList\";\nimport {Sprite, Point, Texture} from 'pixi.js';\n\n/**\n * An individual particle image. You shouldn't have to deal with these.\n */\nexport class Particle extends Sprite\n{\n\t/**\n\t * The emitter that controls this particle.\n\t */\n\tpublic emitter: Emitter;\n\t/**\n\t * The velocity of the particle. Speed may change, but the angle also\n\t * contained in velocity is constant.\n\t */\n\tpublic velocity: Point;\n\t/**\n\t * The maximum lifetime of this particle, in seconds.\n\t */\n\tpublic maxLife: number;\n\t/**\n\t * The current age of the particle, in seconds.\n\t */\n\tpublic age: number;\n\t/**\n\t * A simple easing function to be applied to all properties that\n\t * are being interpolated.\n\t */\n\tpublic ease: SimpleEase;\n\t/**\n\t * Extra data that the emitter passes along for custom particles.\n\t */\n\tpublic extraData: any;\n\t/**\n\t * The alpha of the particle throughout its life.\n\t */\n\tpublic alphaList: PropertyList<number>;\n\t/**\n\t * The speed of the particle throughout its life.\n\t */\n\tpublic speedList: PropertyList<number>;\n\t/**\n\t * A multiplier from 0-1 applied to the speed of the particle at all times.\n\t */\n\tpublic speedMultiplier: number;\n\t/**\n\t * Acceleration to apply to the particle.\n\t */\n\tpublic acceleration: Point;\n\t/**\n\t * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\n\t * will disable the maximum speed.\n\t */\n\tpublic maxSpeed: number;\n\t/**\n\t * Speed at which the particle rotates, in radians per second.\n\t */\n\tpublic rotationSpeed: number;\n\n\t/**\n\t * Acceleration of rotation (angular acceleration) to apply to the particle.\n\t */\n\tpublic rotationAcceleration: number;\n\n\t/**\n\t * If particle rotation is locked, preventing rotation from occurring due\n\t * to directional changes.\n\t */\n\tpublic noRotation: boolean;\n\t/**\n\t * The scale of the particle throughout its life.\n\t */\n\tpublic scaleList: PropertyList<number>;\n\t/**\n\t * A multiplier from 0-1 applied to the scale of the particle at all times.\n\t */\n\tpublic scaleMultiplier: number;\n\t/**\n\t * The tint of the particle throughout its life.\n\t */\n\tpublic colorList: PropertyList<Color>;\n\t/**\n\t * A reference to init, so that subclasses can access it without the penalty of Function.call()\n\t */\n\tprotected Particle_init: typeof Particle.prototype.init;\n\t/**\n\t * A reference to update so that subclasses can access the original without the overhead\n\t * of Function.call().\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t * @return The standard interpolation multiplier (0-1) used for all relevant particle\n\t *                   properties. A value of -1 means the particle died of old age instead.\n\t */\n\tprotected Particle_update: typeof Particle.prototype.update;\n\tprotected Particle_destroy: typeof Particle.prototype.destroy;\n\tprotected Sprite_destroy: typeof Sprite.prototype.destroy;\n\t/**\n\t * If alpha should be interpolated at all.\n\t */\n\tprotected _doAlpha: boolean;\n\t/**\n\t * If scale should be interpolated at all.\n\t */\n\tprotected _doScale: boolean;\n\t/**\n\t * If speed should be interpolated at all.\n\t */\n\tprotected _doSpeed: boolean;\n\t/**\n\t * If acceleration should be handled at all. _doSpeed is mutually exclusive with this,\n\t * and _doSpeed gets priority.\n\t */\n\tprotected _doAcceleration: boolean;\n\t/**\n\t * If color should be interpolated at all.\n\t */\n\tprotected _doColor: boolean;\n\t/**\n\t * If normal movement should be handled. Subclasses wishing to override movement\n\t * can set this to false in init().\n\t */\n\tprotected _doNormalMovement: boolean;\n\t/**\n\t * One divided by the max life of the particle, saved for slightly faster math.\n\t */\n\tprivate _oneOverLife: number;\n\t/**\n\t * Reference to the next particle in the list.\n\t */\n\tpublic next: Particle;\n\n\t/**\n\t * Reference to the previous particle in the list.\n\t */\n\tpublic prev: Particle;\n\n\t/**\n\t * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\n\t */\n\tconstructor(emitter: Emitter)\n\t{\n\t\t//start off the sprite with a blank texture, since we are going to replace it\n\t\t//later when the particle is initialized.\n\t\tsuper();\n\t\tthis.emitter = emitter;\n\t\t//particles should be centered\n\t\tthis.anchor.x = this.anchor.y = 0.5;\n\t\tthis.velocity = new Point();\n\t\tthis.rotationSpeed = 0;\n\t\tthis.rotationAcceleration = 0;\n\t\tthis.maxLife = 0;\n\t\tthis.age = 0;\n\t\tthis.ease = null;\n\t\tthis.extraData = null;\n\t\tthis.alphaList = new PropertyList();\n\t\tthis.speedList = new PropertyList();\n\t\tthis.speedMultiplier = 1;\n\t\tthis.acceleration = new Point();\n\t\tthis.maxSpeed = NaN;\n\t\tthis.scaleList = new PropertyList();\n\t\tthis.scaleMultiplier = 1;\n\t\tthis.colorList = new PropertyList(true);\n\t\tthis._doAlpha = false;\n\t\tthis._doScale = false;\n\t\tthis._doSpeed = false;\n\t\tthis._doAcceleration = false;\n\t\tthis._doColor = false;\n\t\tthis._doNormalMovement = false;\n\t\tthis._oneOverLife = 0;\n\t\tthis.next = null;\n\t\tthis.prev = null;\n\n\t\t//save often used functions on the instance instead of the prototype for better speed\n\t\tthis.init = this.init;\n\t\tthis.Particle_init = Particle.prototype.init;\n\t\tthis.update = this.update;\n\t\tthis.Particle_update = Particle.prototype.update;\n\t\tthis.Sprite_destroy = super.destroy;\n\t\tthis.Particle_destroy = Particle.prototype.destroy;\n\t\tthis.applyArt = this.applyArt;\n\t\tthis.kill = this.kill;\n\t}\n\n\t/**\n\t * Initializes the particle for use, based on the properties that have to\n\t * have been set already on the particle.\n\t */\n\tpublic init()\n\t{\n\t\t//reset the age\n\t\tthis.age = 0;\n\t\t//set up the velocity based on the start speed and rotation\n\t\tthis.velocity.x = this.speedList.current.value * this.speedMultiplier;\n\t\tthis.velocity.y = 0;\n\t\tParticleUtils.rotatePoint(this.rotation, this.velocity);\n\t\tif (this.noRotation)\n\t\t{\n\t\t\tthis.rotation = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//convert rotation to Radians from Degrees\n\t\t\tthis.rotation *= ParticleUtils.DEG_TO_RADS;\n\t\t}\n\t\t//convert rotation speed to Radians from Degrees\n\t\tthis.rotationSpeed *= ParticleUtils.DEG_TO_RADS;\n\t\tthis.rotationAcceleration *= ParticleUtils.DEG_TO_RADS;\n\n\t\t//set alpha to inital alpha\n\t\tthis.alpha = this.alphaList.current.value;\n\t\t//set scale to initial scale\n\t\tthis.scale.x = this.scale.y = this.scaleList.current.value;\n\t\t//figure out what we need to interpolate\n\t\tthis._doAlpha = !!this.alphaList.current.next;\n\t\tthis._doSpeed = !!this.speedList.current.next;\n\t\tthis._doScale = !!this.scaleList.current.next;\n\t\tthis._doColor = !!this.colorList.current.next;\n\t\tthis._doAcceleration = this.acceleration.x !== 0 || this.acceleration.y !== 0;\n\t\t//_doNormalMovement can be cancelled by subclasses\n\t\tthis._doNormalMovement = this._doSpeed || this.speedList.current.value !== 0 || this._doAcceleration;\n\t\t//save our lerp helper\n\t\tthis._oneOverLife = 1 / this.maxLife;\n\t\t//set the inital color\n\t\tlet color = this.colorList.current.value;\n\t\tthis.tint = ParticleUtils.combineRGBComponents(color.r, color.g, color.b);\n\t\t//ensure visibility\n\t\tthis.visible = true;\n\t}\n\n\t/**\n\t * Sets the texture for the particle. This can be overridden to allow\n\t * for an animated particle.\n\t * @param art The texture to set.\n\t */\n\tpublic applyArt(art: any)\n\t{\n\t\tthis.texture = art || Texture.EMPTY;\n\t}\n\n\t/**\n\t * Updates the particle.\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t * @return The standard interpolation multiplier (0-1) used for all\n\t *         relevant particle properties. A value of -1 means the particle\n\t *         died of old age instead.\n\t */\n\tpublic update(delta: number): number\n\t{\n\t\t//increase age\n\t\tthis.age += delta;\n\t\t//recycle particle if it is too old\n\t\tif(this.age >= this.maxLife || this.age < 0)\n\t\t{\n\t\t\tthis.kill();\n\t\t\treturn -1;\n\t\t}\n\n\t\t//determine our interpolation value\n\t\tlet lerp = this.age * this._oneOverLife;//lifetime / maxLife;\n\t\tif (this.ease)\n\t\t{\n\t\t\tif(this.ease.length == 4)\n\t\t\t{\n\t\t\t\t//the t, b, c, d parameters that some tween libraries use\n\t\t\t\t//(time, initial value, end value, duration)\n\t\t\t\tlerp = (this.ease as any)(lerp, 0, 1, 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//the simplified version that we like that takes\n\t\t\t\t//one parameter, time from 0-1. TweenJS eases provide this usage.\n\t\t\t\tlerp = this.ease(lerp);\n\t\t\t}\n\t\t}\n\n\t\t//interpolate alpha\n\t\tif (this._doAlpha)\n\t\t\tthis.alpha = this.alphaList.interpolate(lerp);\n\t\t//interpolate scale\n\t\tif (this._doScale)\n\t\t{\n\t\t\tlet scale = this.scaleList.interpolate(lerp) * this.scaleMultiplier;\n\t\t\tthis.scale.x = this.scale.y = scale;\n\t\t}\n\t\t//handle movement\n\t\tif(this._doNormalMovement)\n\t\t{\n\t\t\tlet deltaX:number;\n\t\t\tlet deltaY:number;\n\t\t\t//interpolate speed\n\t\t\tif (this._doSpeed)\n\t\t\t{\n\t\t\t\tlet speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\n\t\t\t\tParticleUtils.normalize(this.velocity);\n\t\t\t\tParticleUtils.scaleBy(this.velocity, speed);\n\t\t\t\tdeltaX = this.velocity.x * delta;\n\t\t\t\tdeltaY = this.velocity.y * delta;\n\t\t\t}\n\t\t\telse if(this._doAcceleration)\n\t\t\t{\n\t\t\t\tconst oldVX = this.velocity.x;\n\t\t\t\tconst oldVY = this.velocity.y;\n\t\t\t\tthis.velocity.x += this.acceleration.x * delta;\n\t\t\t\tthis.velocity.y += this.acceleration.y * delta;\n\t\t\t\tif (this.maxSpeed)\n\t\t\t\t{\n\t\t\t\t\tlet currentSpeed = ParticleUtils.length(this.velocity);\n\t\t\t\t\t//if we are going faster than we should, clamp at the max speed\n\t\t\t\t\t//DO NOT recalculate vector length\n\t\t\t\t\tif (currentSpeed > this.maxSpeed)\n\t\t\t\t\t{\n\t\t\t\t\t\tParticleUtils.scaleBy(this.velocity, this.maxSpeed / currentSpeed);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// calculate position delta by the midpoint between our old velocity and our new velocity\n\t\t\t\tdeltaX = (oldVX + this.velocity.x) / 2 * delta;\n\t\t\t\tdeltaY = (oldVY + this.velocity.y) / 2 * delta;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdeltaX = this.velocity.x * delta;\n\t\t\t\tdeltaY = this.velocity.y * delta;\n\t\t\t}\n\t\t\t//adjust position based on velocity\n\t\t\tthis.position.x += deltaX;\n\t\t\tthis.position.y += deltaY;\n\t\t}\n\t\t//interpolate color\n\t\tif (this._doColor)\n\t\t{\n\t\t\tthis.tint = this.colorList.interpolate(lerp);\n\t\t}\n\t\t//update rotation\n\t\tif (this.rotationAcceleration !== 0)\n\t\t{\n\t\t\tconst newRotationSpeed = this.rotationSpeed + this.rotationAcceleration * delta;\n\n\t\t\tthis.rotation += (this.rotationSpeed + newRotationSpeed) / 2 * delta;\n\t\t\tthis.rotationSpeed = newRotationSpeed;\n\t\t}\n\t\telse if (this.rotationSpeed !== 0)\n\t\t{\n\t\t\tthis.rotation += this.rotationSpeed * delta;\n\t\t}\n\t\telse if(this.acceleration && !this.noRotation)\n\t\t{\n\t\t\tthis.rotation = Math.atan2(this.velocity.y, this.velocity.x);// + Math.PI / 2;\n\t\t}\n\t\treturn lerp;\n\t}\n\n\t/**\n\t * Kills the particle, removing it from the display list\n\t * and telling the emitter to recycle it.\n\t */\n\tpublic kill()\n\t{\n\t\tthis.emitter.recycle(this);\n\t}\n\n\t/**\n\t * Destroys the particle, removing references and preventing future use.\n\t */\n\tpublic destroy()\n\t{\n\t\tif (this.parent)\n\t\t\tthis.parent.removeChild(this);\n\t\tthis.Sprite_destroy();\n\t\tthis.emitter = this.velocity = this.colorList = this.scaleList = this.alphaList =\n\t\t\tthis.speedList = this.ease = this.next = this.prev = null;\n\t}\n\n\t/**\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\n\t * modifications to prepare it ahead of time.\n\t * @param art The array of art data. For Particle, it should be an array of\n\t *            Textures. Any strings in the array will be converted to\n\t *            Textures via Texture.from().\n\t * @return The art, after any needed modifications.\n\t */\n\tpublic static parseArt(art:any[]): any[]\n\t{\n\t\t//convert any strings to Textures.\n\t\tlet i;\n\t\tfor(i = art.length; i >= 0; --i)\n\t\t{\n\t\t\tif(typeof art[i] == \"string\")\n\t\t\t\tart[i] = Texture.fromImage(art[i]);\n\t\t}\n\t\t//particles from different base textures will be slower in WebGL than if they\n\t\t//were from one spritesheet\n\t\tif(ParticleUtils.verbose)\n\t\t{\n\t\t\tfor(i = art.length - 1; i > 0; --i)\n\t\t\t{\n\t\t\t\tif(art[i].baseTexture != art[i - 1].baseTexture)\n\t\t\t\t{\n\t\t\t\t\tif (window.console)\n\t\t\t\t\t\tconsole.warn(\"PixiParticles: using particle textures from different images may hinder performance in WebGL\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn art;\n\t}\n\n\t/**\n\t * Parses extra emitter data to ensure it is set up for this particle class.\n\t * Particle does nothing to the extra data.\n\t * @param extraData The extra data from the particle config.\n\t * @return The parsed extra data.\n\t */\n\tpublic static parseData(extraData: any): any\n\t{\n\t\treturn extraData;\n\t}\n}\n","import {ParticleUtils, Color, SimpleEase} from \"./ParticleUtils\";\nimport {Particle} from \"./Particle\";\nimport {PropertyNode} from \"./PropertyNode\";\nimport {PolygonalChain} from \"./PolygonalChain\";\nimport {EmitterConfig, OldEmitterConfig} from \"./EmitterConfig\";\nimport {Point, Circle, Rectangle, Container, settings} from \"pixi.js\";\nimport * as pixi from \"pixi.js\";\n// get the shared ticker, in V4 and V5 friendly methods\n/**\n * @hidden\n */\nlet ticker: pixi.ticker.Ticker;\n// to avoid Rollup transforming our import, save pixi namespace in a variable\nconst pixiNS = pixi;\nif (parseInt(/^(\\d+)\\./.exec(pixi.VERSION)[1]) < 5)\n{\n\tticker = pixiNS.ticker.shared;\n}\nelse\n{\n\tticker = (pixiNS as any).Ticker.shared;\n}\n\nexport interface ParticleConstructor\n{\n\tnew (emitter:Emitter):Particle;\n}\n\n/**\n * @hidden\n */\nconst helperPoint = new Point();\n\n/**\n * A particle emitter.\n */\nexport class Emitter\n{\n\t/**\n\t * The constructor used to create new particles. The default is\n\t * the built in particle class.\n\t */\n\tprotected _particleConstructor: typeof Particle;\n\t//properties for individual particles\n\t/**\n\t * An array of PIXI Texture objects.\n\t */\n\tpublic particleImages: any[];\n\t/**\n\t * The first node in the list of alpha values for all particles.\n\t */\n\tpublic startAlpha: PropertyNode<number>;\n\t/**\n\t * The first node in the list of speed values of all particles.\n\t */\n\tpublic startSpeed: PropertyNode<number>;\n\t/**\n\t * A minimum multiplier for the speed of a particle at all stages of its life. A value between\n\t * minimumSpeedMultiplier and 1 is randomly generated for each particle.\n\t */\n\tpublic minimumSpeedMultiplier: number;\n\t/**\n\t * Acceleration to apply to particles. Using this disables\n\t * any interpolation of particle speed. If the particles do\n\t * not have a rotation speed, then they will be rotated to\n\t * match the direction of travel.\n\t */\n\tpublic acceleration: Point;\n\t/**\n\t * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\n\t * will disable the maximum speed.\n\t */\n\tpublic maxSpeed: number;\n\t/**\n\t * The first node in the list of scale values of all particles.\n\t */\n\tpublic startScale: PropertyNode<number>;\n\t/**\n\t * A minimum multiplier for the scale of a particle at all stages of its life. A value between\n\t * minimumScaleMultiplier and 1 is randomly generated for each particle.\n\t */\n\tpublic minimumScaleMultiplier: number;\n\t/**\n\t * The first node in the list of  color values of all particles, as red, green, and blue\n\t * uints from 0-255.\n\t */\n\tpublic startColor: PropertyNode<Color>;\n\t/**\n\t * The minimum lifetime for a particle, in seconds.\n\t */\n\tpublic minLifetime: number;\n\t/**\n\t * The maximum lifetime for a particle, in seconds.\n\t */\n\tpublic maxLifetime: number;\n\t/**\n\t * The minimum start rotation for a particle, in degrees. This value\n\t * is ignored if the spawn type is \"burst\" or \"arc\".\n\t */\n\tpublic minStartRotation: number;\n\t/**\n\t * The maximum start rotation for a particle, in degrees. This value\n\t * is ignored if the spawn type is \"burst\" or \"arc\".\n\t */\n\tpublic maxStartRotation: number;\n\t/**\n\t * If no particle rotation should occur. Starting rotation will still\n\t * affect the direction in which particles move. If the rotation speed\n\t * is set, then this will be ignored.\n\t */\n\tpublic noRotation: boolean;\n\t/**\n\t * The minimum rotation speed for a particle, in degrees per second.\n\t * This only visually spins the particle, it does not change direction\n\t * of movement.\n\t */\n\tpublic minRotationSpeed: number;\n\t/**\n\t * The maximum rotation speed for a particle, in degrees per second.\n\t * This only visually spins the particle, it does not change direction\n\t * of movement.\n\t */\n\tpublic maxRotationSpeed: number;\n\t/**\n\t* The Acceleration of rotation (angular acceleration) for a particle, in degrees per second.\n\t*/\n\tpublic rotationAcceleration: number;\n\t/**\n\t * The blend mode for all particles, as named by PIXI.blendModes.\n\t */\n\tpublic particleBlendMode: number;\n\t/**\n\t * An easing function for nonlinear interpolation of values. Accepts a single\n\t * parameter of time as a value from 0-1, inclusive. Expected outputs are values\n\t * from 0-1, inclusive.\n\t */\n\tpublic customEase: SimpleEase;\n\t/**\n\t *\tExtra data for use in custom particles. The emitter doesn't look inside, but\n\t *\tpasses it on to the particle to use in init().\n\t */\n\tpublic extraData: any;\n\t//properties for spawning particles\n\t/**\n\t * Time between particle spawns in seconds.\n\t */\n\tprotected _frequency: number;\n\t/**\n\t * Chance that a particle will be spawned on each opportunity to spawn one.\n\t * 0 is 0%, 1 is 100%.\n\t */\n\tpublic spawnChance: number;\n\t/**\n\t * Maximum number of particles to keep alive at a time. If this limit\n\t * is reached, no more particles will spawn until some have died.\n\t */\n\tpublic maxParticles: number;\n\t/**\n\t * The amount of time in seconds to emit for before setting emit to false.\n\t * A value of -1 is an unlimited amount of time.\n\t */\n\tpublic emitterLifetime: number;\n\t/**\n\t * Position at which to spawn particles, relative to the emitter's owner's origin.\n\t * For example, the flames of a rocket travelling right might have a spawnPos\n\t * of {x:-50, y:0}.\n\t * to spawn at the rear of the rocket.\n\t * To change this, use updateSpawnPos().\n\t */\n\tpublic spawnPos: Point;\n\t/**\n\t * How the particles will be spawned. Valid types are \"point\", \"rectangle\",\n\t * \"circle\", \"burst\", \"ring\".\n\t */\n\tpublic spawnType: string;\n\t/**\n\t * A reference to the emitter function specific to the spawn type.\n\t */\n\tprotected _spawnFunc: (p: Particle, emitPosX: number, emitPosY: number, i?: number) => void;\n\t/**\n\t * A rectangle relative to spawnPos to spawn particles inside if the spawn type is \"rect\".\n\t */\n\tpublic spawnRect: Rectangle;\n\t/**\n\t * A polygon relative to spawnPos to spawn particles on the chain if the spawn type is \"polygonalChain\".\n\t */\n\tpublic spawnPolygonalChain: PolygonalChain;\n\t/**\n\t * A circle relative to spawnPos to spawn particles inside if the spawn type is \"circle\".\n\t */\n\tpublic spawnCircle: Circle & {minRadius: number};\n\t/**\n\t * Number of particles to spawn time that the frequency allows for particles to spawn.\n\t */\n\tpublic particlesPerWave: number;\n\t/**\n\t * Spacing between particles in a burst. 0 gives a random angle for each particle.\n\t */\n\tpublic particleSpacing: number;\n\t/**\n\t * Angle at which to start spawning particles in a burst.\n\t */\n\tpublic angleStart: number;\n\t/**\n\t * Rotation of the emitter or emitter's owner in degrees. This is added to\n\t * the calculated spawn angle.\n\t * To change this, use rotate().\n\t */\n\tprotected rotation: number;\n\t/**\n\t * The world position of the emitter's owner, to add spawnPos to when\n\t * spawning particles. To change this, use updateOwnerPos().\n\t */\n\tprotected ownerPos: Point;\n\t/**\n\t * The origin + spawnPos in the previous update, so that the spawn position\n\t * can be interpolated to space out particles better.\n\t */\n\tprotected _prevEmitterPos: Point;\n\t/**\n\t * If _prevEmitterPos is valid, to prevent interpolation on the first update\n\t */\n\tprotected _prevPosIsValid: boolean;\n\t/**\n\t * If either ownerPos or spawnPos has changed since the previous update.\n\t */\n\tprotected _posChanged: boolean;\n\t/**\n\t * The container to add particles to.\n\t */\n\tprotected _parent: Container;\n\t/**\n\t * If particles should be added at the back of the display list instead of the front.\n\t */\n\tpublic addAtBack: boolean;\n\t/**\n\t * The current number of active particles.\n\t */\n\tpublic particleCount: number;\n\t/**\n\t * If particles should be emitted during update() calls. Setting this to false\n\t * stops new particles from being created, but allows existing ones to die out.\n\t */\n\tprotected _emit: boolean;\n\t/**\n\t * The timer for when to spawn particles in seconds, where numbers less\n\t * than 0 mean that particles should be spawned.\n\t */\n\tprotected _spawnTimer: number;\n\t/**\n\t * The life of the emitter in seconds.\n\t */\n\tprotected _emitterLife: number;\n\t/**\n\t * The particles that are active and on the display list. This is the first particle in a\n\t * linked list.\n\t */\n\tprotected _activeParticlesFirst: Particle;\n\t/**\n\t * The particles that are active and on the display list. This is the last particle in a\n\t * linked list.\n\t */\n\tprotected _activeParticlesLast: Particle;\n\t/**\n\t * The particles that are not currently being used. This is the first particle in a\n\t * linked list.\n\t */\n\tprotected _poolFirst: Particle;\n\t/**\n\t * The original config object that this emitter was initialized with.\n\t */\n\tprotected _origConfig: any;\n\t/**\n\t * The original particle image data that this emitter was initialized with.\n\t */\n\tprotected _origArt: any;\n\t/**\n\t * If the update function is called automatically from the shared ticker.\n\t * Setting this to false requires calling the update function manually.\n\t */\n\tprotected _autoUpdate: boolean;\n\t/**\n\t * If the emitter should destroy itself when all particles have died out. This is set by\n\t * playOnceAndDestroy();\n\t */\n\tprotected _destroyWhenComplete: boolean;\n\t/**\n\t * A callback for when all particles have died out. This is set by\n\t * playOnceAndDestroy() or playOnce();\n\t */\n\tprotected _completeCallback: () => void;\n\n\t/**\n\t * @param particleParent The container to add the particles to.\n\t * @param particleImages A texture or array of textures to use\n\t *                       for the particles. Strings will be turned\n\t *                       into textures via Texture.fromImage().\n\t * @param config A configuration object containing settings for the emitter.\n\t * @param config.emit If config.emit is explicitly passed as false, the\n\t *                    Emitter will start disabled.\n\t * @param config.autoUpdate If config.autoUpdate is explicitly passed as\n\t *                          true, the Emitter will automatically call\n\t *                          update via the PIXI shared ticker.\n\t */\n\tconstructor(particleParent: Container, particleImages: any, config: EmitterConfig|OldEmitterConfig)\n\t{\n\t\tthis._particleConstructor = Particle;\n\t\t//properties for individual particles\n\t\tthis.particleImages = null;\n\t\tthis.startAlpha = null;\n\t\tthis.startSpeed = null;\n\t\tthis.minimumSpeedMultiplier = 1;\n\t\tthis.acceleration = null;\n\t\tthis.maxSpeed = NaN;\n\t\tthis.startScale = null;\n\t\tthis.minimumScaleMultiplier = 1;\n\t\tthis.startColor = null;\n\t\tthis.minLifetime = 0;\n\t\tthis.maxLifetime = 0;\n\t\tthis.minStartRotation = 0;\n\t\tthis.maxStartRotation = 0;\n\t\tthis.noRotation = false;\n\t\tthis.minRotationSpeed = 0;\n\t\tthis.maxRotationSpeed = 0;\n\t\tthis.particleBlendMode = 0;\n\t\tthis.customEase = null;\n\t\tthis.extraData = null;\n\t\t//properties for spawning particles\n\t\tthis._frequency = 1;\n\t\tthis.spawnChance = 1;\n\t\tthis.maxParticles = 1000;\n\t\tthis.emitterLifetime = -1;\n\t\tthis.spawnPos = null;\n\t\tthis.spawnType = null;\n\t\tthis._spawnFunc = null;\n\t\tthis.spawnRect = null;\n\t\tthis.spawnCircle = null;\n\t\tthis.spawnPolygonalChain = null;\n\t\tthis.particlesPerWave = 1;\n\t\tthis.particleSpacing = 0;\n\t\tthis.angleStart = 0;\n\t\t//emitter properties\n\t\tthis.rotation = 0;\n\t\tthis.ownerPos = null;\n\t\tthis._prevEmitterPos = null;\n\t\tthis._prevPosIsValid = false;\n\t\tthis._posChanged = false;\n\t\tthis._parent = null;\n\t\tthis.addAtBack = false;\n\t\tthis.particleCount = 0;\n\t\tthis._emit = false;\n\t\tthis._spawnTimer = 0;\n\t\tthis._emitterLife = -1;\n\t\tthis._activeParticlesFirst = null;\n\t\tthis._activeParticlesLast = null;\n\t\tthis._poolFirst = null;\n\t\tthis._origConfig = null;\n\t\tthis._origArt = null;\n\t\tthis._autoUpdate = false;\n\t\tthis._destroyWhenComplete = false;\n\t\tthis._completeCallback = null;\n\n\t\t//set the initial parent\n\t\tthis.parent = particleParent;\n\n\t\tif(particleImages && config)\n\t\t\tthis.init(particleImages, config);\n\n\t\t//save often used functions on the instance instead of the prototype for better speed\n\t\tthis.recycle = this.recycle;\n\t\tthis.update = this.update;\n\t\tthis.rotate = this.rotate;\n\t\tthis.updateSpawnPos = this.updateSpawnPos;\n\t\tthis.updateOwnerPos = this.updateOwnerPos;\n\t}\n\n\t/**\n\t * Time between particle spawns in seconds. If this value is not a number greater than 0,\n\t * it will be set to 1 (particle per second) to prevent infinite loops.\n\t */\n\tpublic get frequency() { return this._frequency; }\n\tpublic set frequency(value)\n\t{\n\t\t//do some error checking to prevent infinite loops\n\t\tif(typeof value == \"number\" && value > 0)\n\t\t\tthis._frequency = value;\n\t\telse\n\t\t\tthis._frequency = 1;\n\t}\n\t/**\n\t * The constructor used to create new particles. The default is\n\t * the built in Particle class. Setting this will dump any active or\n\t * pooled particles, if the emitter has already been used.\n\t */\n\tpublic get particleConstructor() { return this._particleConstructor; }\n\tpublic set particleConstructor(value)\n\t{\n\t\tif(value != this._particleConstructor)\n\t\t{\n\t\t\tthis._particleConstructor = value;\n\t\t\t//clean up existing particles\n\t\t\tthis.cleanup();\n\t\t\t//scrap all the particles\n\t\t\tfor (let particle = this._poolFirst; particle; particle = particle.next)\n\t\t\t{\n\t\t\t\tparticle.destroy();\n\t\t\t}\n\t\t\tthis._poolFirst = null;\n\t\t\t//re-initialize the emitter so that the new constructor can do anything it needs to\n\t\t\tif(this._origConfig && this._origArt)\n\t\t\t\tthis.init(this._origArt, this._origConfig);\n\t\t}\n\t}\n\n\t/**\n\t* The container to add particles to. Settings this will dump any active particles.\n\t*/\n\tpublic get parent() { return this._parent; }\n\tpublic set parent(value)\n\t{\n\t\tthis.cleanup();\n\t\tthis._parent = value;\n\t}\n\n\t/**\n\t * Sets up the emitter based on the config settings.\n\t * @param art A texture or array of textures to use for the particles.\n\t * @param config A configuration object containing settings for the emitter.\n\t */\n\tpublic init(art: any, config: EmitterConfig|OldEmitterConfig)\n\t{\n\t\tif(!art || !config)\n\t\t\treturn;\n\t\t//clean up any existing particles\n\t\tthis.cleanup();\n\n\t\t//store the original config and particle images, in case we need to re-initialize\n\t\t//when the particle constructor is changed\n\t\tthis._origConfig = config;\n\t\tthis._origArt = art;\n\n\t\t//set up the array of data, also ensuring that it is an array\n\t\tart = Array.isArray(art) ? art.slice() : [art];\n\t\t//run the art through the particle class's parsing function\n\t\tconst partClass = this._particleConstructor;\n\t\tthis.particleImages = partClass.parseArt ? partClass.parseArt(art) : art;\n\t\t///////////////////////////\n\t\t// Particle Properties   //\n\t\t///////////////////////////\n\t\t//set up the alpha\n\t\tif (config.alpha)\n\t\t{\n\t\t\tthis.startAlpha = PropertyNode.createList(config.alpha);\n\t\t}\n\t\telse\n\t\t\tthis.startAlpha = new PropertyNode(1, 0);\n\t\t//set up the speed\n\t\tif (config.speed)\n\t\t{\n\t\t\tthis.startSpeed = PropertyNode.createList(config.speed);\n\t\t\tthis.minimumSpeedMultiplier = ('minimumSpeedMultiplier' in config ? config.minimumSpeedMultiplier : (config.speed as any).minimumSpeedMultiplier) || 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.minimumSpeedMultiplier = 1;\n\t\t\tthis.startSpeed = new PropertyNode(0, 0);\n\t\t}\n\t\t//set up acceleration\n\t\tlet acceleration = config.acceleration;\n\t\tif(acceleration && (acceleration.x || acceleration.y))\n\t\t{\n\t\t\t//make sure we disable speed interpolation\n\t\t\tthis.startSpeed.next = null;\n\t\t\tthis.acceleration = new Point(acceleration.x, acceleration.y);\n\t\t\tthis.maxSpeed = config.maxSpeed || NaN;\n\t\t}\n\t\telse\n\t\t\tthis.acceleration = new Point();\n\t\t//set up the scale\n\t\tif (config.scale)\n\t\t{\n\t\t\tthis.startScale = PropertyNode.createList(config.scale);\n\t\t\tthis.minimumScaleMultiplier = ('minimumScaleMultiplier' in config ? config.minimumScaleMultiplier : (config.scale as any).minimumScaleMultiplier) || 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.startScale = new PropertyNode(1, 0);\n\t\t\tthis.minimumScaleMultiplier = 1;\n\t\t}\n\t\t//set up the color\n\t\tif (config.color)\n\t\t{\n\t\t\tthis.startColor = PropertyNode.createList(config.color);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.startColor = new PropertyNode({r:0xFF, g:0xFF, b:0xFF}, 0);\n\t\t}\n\t\t//set up the start rotation\n\t\tif (config.startRotation)\n\t\t{\n\t\t\tthis.minStartRotation = config.startRotation.min;\n\t\t\tthis.maxStartRotation = config.startRotation.max;\n\t\t}\n\t\telse\n\t\t\tthis.minStartRotation = this.maxStartRotation = 0;\n\t\tif (config.noRotation &&\n\t\t\t(this.minStartRotation || this.maxStartRotation))\n\t\t{\n\t\t\tthis.noRotation = !!config.noRotation;\n\t\t}\n\t\telse\n\t\t\tthis.noRotation = false;\n\t\t//set up the rotation speed\n\t\tif (config.rotationSpeed)\n\t\t{\n\t\t\tthis.minRotationSpeed = config.rotationSpeed.min;\n\t\t\tthis.maxRotationSpeed = config.rotationSpeed.max;\n\t\t}\n\t\telse\n\t\t\tthis.minRotationSpeed = this.maxRotationSpeed = 0;\n\n\t\tthis.rotationAcceleration = config.rotationAcceleration || 0;\n\t\t//set up the lifetime\n\t\tthis.minLifetime = config.lifetime.min;\n\t\tthis.maxLifetime = config.lifetime.max;\n\t\t//get the blend mode\n\t\tthis.particleBlendMode = ParticleUtils.getBlendMode(config.blendMode);\n\t\t//use the custom ease if provided\n\t\tif (config.ease)\n\t\t{\n\t\t\tthis.customEase = typeof config.ease == \"function\" ?\n\t\t\t\tconfig.ease : ParticleUtils.generateEase(config.ease);\n\t\t}\n\t\telse\n\t\t\tthis.customEase = null;\n\t\t//set up the extra data, running it through the particle class's parseData function.\n\t\tif(partClass.parseData)\n\t\t\tthis.extraData = partClass.parseData(config.extraData);\n\t\telse\n\t\t\tthis.extraData = config.extraData || null;\n\t\t//////////////////////////\n\t\t// Emitter Properties   //\n\t\t//////////////////////////\n\t\t//reset spawn type specific settings\n\t\tthis.spawnRect = this.spawnCircle = null;\n\t\tthis.particlesPerWave = 1;\n\t\tif (config.particlesPerWave && config.particlesPerWave > 1)\n\t\t\tthis.particlesPerWave = config.particlesPerWave;\n\t\tthis.particleSpacing = 0;\n\t\tthis.angleStart = 0;\n\t\t//determine the spawn function to use\n\t\tthis.parseSpawnType(config);\n\t\t//set the spawning frequency\n\t\tthis.frequency = config.frequency;\n\t\tthis.spawnChance = (typeof config.spawnChance === 'number' && config.spawnChance > 0) ? config.spawnChance : 1;\n\t\t//set the emitter lifetime\n\t\tthis.emitterLifetime = config.emitterLifetime || -1;\n\t\t//set the max particles\n\t\tthis.maxParticles = config.maxParticles > 0 ? config.maxParticles : 1000;\n\t\t//determine if we should add the particle at the back of the list or not\n\t\tthis.addAtBack = !!config.addAtBack;\n\t\t//reset the emitter position and rotation variables\n\t\tthis.rotation = 0;\n\t\tthis.ownerPos = new Point();\n\t\tthis.spawnPos = new Point(config.pos.x, config.pos.y);\n\n\t\tthis.initAdditional(art, config);\n\n\t\tthis._prevEmitterPos = this.spawnPos.clone();\n\t\t//previous emitter position is invalid and should not be used for interpolation\n\t\tthis._prevPosIsValid = false;\n\t\t//start emitting\n\t\tthis._spawnTimer = 0;\n\t\tthis.emit = config.emit === undefined ? true : !!config.emit;\n\t\tthis.autoUpdate = !!config.autoUpdate;\n\t}\n\n\t/**\n\t * Sets up additional parameters to the emitter from config settings.\n\t * Using for parsing additional parameters on classes that extend from Emitter\n\t * @param art A texture or array of textures to use for the particles.\n\t * @param config A configuration object containing settings for the emitter.\n\t */\n\tprotected initAdditional(art: any, config: EmitterConfig|OldEmitterConfig)\n\t{\n\t}\n\n\t/**\n\t * Parsing emitter spawn type from config settings.\n\t * Place for override and add new kind of spawn type\n\t * @param config A configuration object containing settings for the emitter.\n\t */\n\tprotected parseSpawnType(config: EmitterConfig|OldEmitterConfig) {\n\t\tlet spawnCircle;\n\n\t\tswitch(config.spawnType)\n\t\t{\n\t\t\tcase \"rect\":\n\t\t\t\tthis.spawnType = \"rect\";\n\t\t\t\tthis._spawnFunc = this._spawnRect;\n\t\t\t\tlet spawnRect = config.spawnRect;\n\t\t\t\tthis.spawnRect = new Rectangle(spawnRect.x, spawnRect.y, spawnRect.w, spawnRect.h);\n\t\t\t\tbreak;\n\t\t\tcase \"circle\":\n\t\t\t\tthis.spawnType = \"circle\";\n\t\t\t\tthis._spawnFunc = this._spawnCircle;\n\t\t\t\tspawnCircle = config.spawnCircle;\n\t\t\t\tthis.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\n\t\t\t\tbreak;\n\t\t\tcase \"ring\":\n\t\t\t\tthis.spawnType = \"ring\";\n\t\t\t\tthis._spawnFunc = this._spawnRing;\n\t\t\t\tspawnCircle = config.spawnCircle;\n\t\t\t\tthis.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\n\t\t\t\tthis.spawnCircle.minRadius = spawnCircle.minR;\n\t\t\t\tbreak;\n\t\t\tcase \"burst\":\n\t\t\t\tthis.spawnType = \"burst\";\n\t\t\t\tthis._spawnFunc = this._spawnBurst;\n\t\t\t\tthis.particleSpacing = config.particleSpacing;\n\t\t\t\tthis.angleStart = config.angleStart ? config.angleStart : 0;\n\t\t\t\tbreak;\n\t\t\tcase \"point\":\n\t\t\t\tthis.spawnType = \"point\";\n\t\t\t\tthis._spawnFunc = this._spawnPoint;\n\t\t\t\tbreak;\n\t\t\tcase \"polygonalChain\":\n\t\t\t\tthis.spawnType = \"polygonalChain\";\n\t\t\t\tthis._spawnFunc = this._spawnPolygonalChain;\n\t\t\t\tthis.spawnPolygonalChain = new PolygonalChain(config.spawnPolygon);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.spawnType = \"point\";\n\t\t\t\tthis._spawnFunc = this._spawnPoint;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Recycles an individual particle. For internal use only.\n\t * @param particle The particle to recycle.\n\t * @internal\n\t */\n\tpublic recycle(particle: Particle)\n\t{\n\t\tif(particle.next)\n\t\t\tparticle.next.prev = particle.prev;\n\t\tif(particle.prev)\n\t\t\tparticle.prev.next = particle.next;\n\t\tif(particle == this._activeParticlesLast)\n\t\t\tthis._activeParticlesLast = particle.prev;\n\t\tif(particle == this._activeParticlesFirst)\n\t\t\tthis._activeParticlesFirst = particle.next;\n\t\t//add to pool\n\t\tparticle.prev = null;\n\t\tparticle.next = this._poolFirst;\n\t\tthis._poolFirst = particle;\n\t\t//remove child from display, or make it invisible if it is in a ParticleContainer\n\t\tif(particle.parent)\n\t\t\tparticle.parent.removeChild(particle);\n\t\t//decrease count\n\t\t--this.particleCount;\n\t}\n\n\t/**\n\t * Sets the rotation of the emitter to a new value.\n\t * @param newRot The new rotation, in degrees.\n\t */\n\tpublic rotate(newRot: number)\n\t{\n\t\tif (this.rotation == newRot) return;\n\t\t//caclulate the difference in rotation for rotating spawnPos\n\t\tlet diff = newRot - this.rotation;\n\t\tthis.rotation = newRot;\n\t\t//rotate spawnPos\n\t\tParticleUtils.rotatePoint(diff, this.spawnPos);\n\t\t//mark the position as having changed\n\t\tthis._posChanged = true;\n\t}\n\n\t/**\n\t * Changes the spawn position of the emitter.\n\t * @param x The new x value of the spawn position for the emitter.\n\t * @param y The new y value of the spawn position for the emitter.\n\t */\n\tpublic updateSpawnPos(x: number, y: number)\n\t{\n\t\tthis._posChanged = true;\n\t\tthis.spawnPos.x = x;\n\t\tthis.spawnPos.y = y;\n\t}\n\n\t/**\n\t * Changes the position of the emitter's owner. You should call this if you are adding\n\t * particles to the world container that your emitter's owner is moving around in.\n\t * @param x The new x value of the emitter's owner.\n\t * @param y The new y value of the emitter's owner.\n\t */\n\tpublic updateOwnerPos(x: number, y: number)\n\t{\n\t\tthis._posChanged = true;\n\t\tthis.ownerPos.x = x;\n\t\tthis.ownerPos.y = y;\n\t}\n\n\t/**\n\t * Prevents emitter position interpolation in the next update.\n\t * This should be used if you made a major position change of your emitter's owner\n\t * that was not normal movement.\n\t */\n\tpublic resetPositionTracking()\n\t{\n\t\tthis._prevPosIsValid = false;\n\t}\n\n\t/**\n\t * If particles should be emitted during update() calls. Setting this to false\n\t * stops new particles from being created, but allows existing ones to die out.\n\t */\n\tpublic get emit() { return this._emit; };\n\tpublic set emit(value)\n\t{\n\t\tthis._emit = !!value;\n\t\tthis._emitterLife = this.emitterLifetime;\n\t}\n\n\t/**\n\t * If the update function is called automatically from the shared ticker.\n\t * Setting this to false requires calling the update function manually.\n\t */\n\tpublic get autoUpdate() { return this._autoUpdate; }\n\tpublic set autoUpdate(value)\n\t{\n\t\tif (this._autoUpdate && !value)\n\t\t{\n\t\t\tticker.remove(this.update, this);\n\t\t}\n\t\telse if (!this._autoUpdate && value)\n\t\t{\n\t\t\tticker.add(this.update, this);\n\t\t}\n\t\tthis._autoUpdate = !!value;\n\t}\n\n\t/**\n\t * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\n\t * when particle emission is complete.\n\t * @param callback Callback for when emission is complete (all particles have died off)\n\t */\n\tpublic playOnceAndDestroy(callback?: () => void)\n\t{\n\t\tthis.autoUpdate = true;\n\t\tthis.emit = true;\n\t\tthis._destroyWhenComplete = true;\n\t\tthis._completeCallback = callback;\n\t}\n\n\t/**\n\t * Starts emitting particles and optionally calls a callback when particle emission is complete.\n\t * @param callback Callback for when emission is complete (all particles have died off)\n\t */\n\tpublic playOnce(callback?: () => void)\n\t{\n\t\tthis.emit = true;\n\t\tthis._completeCallback = callback;\n\t}\n\n\t/**\n\t * Updates all particles spawned by this emitter and emits new ones.\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t */\n\tpublic update(delta: number)\n\t{\n\t\tif (this._autoUpdate)\n\t\t{\n\t\t\tdelta = delta / settings.TARGET_FPMS / 1000;\n\t\t}\n\n\t\t//if we don't have a parent to add particles to, then don't do anything.\n\t\t//this also works as a isDestroyed check\n\t\tif (!this._parent) return;\n\t\t//update existing particles\n\t\tlet i, particle, next;\n\t\tfor (particle = this._activeParticlesFirst; particle; particle = next)\n\t\t{\n\t\t\tnext = particle.next;\n\t\t\tparticle.update(delta);\n\t\t}\n\t\tlet prevX, prevY;\n\t\t//if the previous position is valid, store these for later interpolation\n\t\tif(this._prevPosIsValid)\n\t\t{\n\t\t\tprevX = this._prevEmitterPos.x;\n\t\t\tprevY = this._prevEmitterPos.y;\n\t\t}\n\t\t//store current position of the emitter as local variables\n\t\tlet curX = this.ownerPos.x + this.spawnPos.x;\n\t\tlet curY = this.ownerPos.y + this.spawnPos.y;\n\t\t//spawn new particles\n\t\tif (this._emit)\n\t\t{\n\t\t\t//decrease spawn timer\n\t\t\tthis._spawnTimer -=  delta < 0 ? 0 : delta;\n\t\t\t//while _spawnTimer < 0, we have particles to spawn\n\t\t\twhile(this._spawnTimer <= 0)\n\t\t\t{\n\t\t\t\t//determine if the emitter should stop spawning\n\t\t\t\tif(this._emitterLife > 0)\n\t\t\t\t{\n\t\t\t\t\tthis._emitterLife -= this._frequency;\n\t\t\t\t\tif(this._emitterLife <= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis._spawnTimer = 0;\n\t\t\t\t\t\tthis._emitterLife = 0;\n\t\t\t\t\t\tthis.emit = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//determine if we have hit the particle limit\n\t\t\t\tif(this.particleCount >= this.maxParticles)\n\t\t\t\t{\n\t\t\t\t\tthis._spawnTimer += this._frequency;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//determine the particle lifetime\n\t\t\t\tlet lifetime;\n\t\t\t\tif (this.minLifetime == this.maxLifetime)\n\t\t\t\t\tlifetime = this.minLifetime;\n\t\t\t\telse\n\t\t\t\t\tlifetime = Math.random() * (this.maxLifetime - this.minLifetime) + this.minLifetime;\n\t\t\t\t//only make the particle if it wouldn't immediately destroy itself\n\t\t\t\tif(-this._spawnTimer < lifetime)\n\t\t\t\t{\n\t\t\t\t\t//If the position has changed and this isn't the first spawn,\n\t\t\t\t\t//interpolate the spawn position\n\t\t\t\t\tlet emitPosX, emitPosY;\n\t\t\t\t\tif (this._prevPosIsValid && this._posChanged)\n\t\t\t\t\t{\n\t\t\t\t\t\t//1 - _spawnTimer / delta, but _spawnTimer is negative\n\t\t\t\t\t\tlet lerp = 1 + this._spawnTimer / delta;\n\t\t\t\t\t\temitPosX = (curX - prevX) * lerp + prevX;\n\t\t\t\t\t\temitPosY = (curY - prevY) * lerp + prevY;\n\t\t\t\t\t}\n\t\t\t\t\telse//otherwise just set to the spawn position\n\t\t\t\t\t{\n\t\t\t\t\t\temitPosX = curX;\n\t\t\t\t\t\temitPosY = curY;\n\t\t\t\t\t}\n\t\t\t\t\t//create enough particles to fill the wave (non-burst types have a wave of 1)\n\t\t\t\t\ti = 0;\n\t\t\t\t\tfor(let len = Math.min(this.particlesPerWave, this.maxParticles - this.particleCount); i < len; ++i)\n\t\t\t\t\t{\n\t\t\t\t\t\t//see if we actually spawn one\n\t\t\t\t\t\tif (this.spawnChance < 1 && Math.random() >= this.spawnChance)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t//create particle\n\t\t\t\t\t\tlet p;\n\t\t\t\t\t\tif(this._poolFirst)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp = this._poolFirst;\n\t\t\t\t\t\t\tthis._poolFirst = this._poolFirst.next;\n\t\t\t\t\t\t\tp.next = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp = new this.particleConstructor(this);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//set a random texture if we have more than one\n\t\t\t\t\t\tif(this.particleImages.length > 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.applyArt(this.particleImages[Math.floor(Math.random() * this.particleImages.length)]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//if they are actually the same texture, a standard particle\n\t\t\t\t\t\t\t//will quit early from the texture setting in setTexture().\n\t\t\t\t\t\t\tp.applyArt(this.particleImages[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//set up the start and end values\n\t\t\t\t\t\tp.alphaList.reset(this.startAlpha);\n\t\t\t\t\t\tif(this.minimumSpeedMultiplier != 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.speedMultiplier = Math.random() * (1 - this.minimumSpeedMultiplier) + this.minimumSpeedMultiplier;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp.speedList.reset(this.startSpeed);\n\t\t\t\t\t\tp.acceleration.x = this.acceleration.x;\n\t\t\t\t\t\tp.acceleration.y = this.acceleration.y;\n\t\t\t\t\t\tp.maxSpeed = this.maxSpeed;\n\t\t\t\t\t\tif(this.minimumScaleMultiplier != 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.scaleMultiplier = Math.random() * (1 - this.minimumScaleMultiplier) + this.minimumScaleMultiplier;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp.scaleList.reset(this.startScale);\n\t\t\t\t\t\tp.colorList.reset(this.startColor);\n\t\t\t\t\t\t//randomize the rotation speed\n\t\t\t\t\t\tif(this.minRotationSpeed == this.maxRotationSpeed)\n\t\t\t\t\t\t\tp.rotationSpeed = this.minRotationSpeed;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tp.rotationSpeed = Math.random() * (this.maxRotationSpeed - this.minRotationSpeed) + this.minRotationSpeed;\n\t\t\t\t\t\tp.rotationAcceleration = this.rotationAcceleration;\n\t\t\t\t\t\tp.noRotation = this.noRotation;\n\t\t\t\t\t\t//set up the lifetime\n\t\t\t\t\t\tp.maxLife = lifetime;\n\t\t\t\t\t\t//set the blend mode\n\t\t\t\t\t\tp.blendMode = this.particleBlendMode;\n\t\t\t\t\t\t//set the custom ease, if any\n\t\t\t\t\t\tp.ease = this.customEase;\n\t\t\t\t\t\t//set the extra data, if any\n\t\t\t\t\t\tp.extraData = this.extraData;\n\t\t\t\t\t\t//set additional properties to particle\n\t\t\t\t\t\tthis.applyAdditionalProperties(p);\n\t\t\t\t\t\t//call the proper function to handle rotation and position of particle\n\t\t\t\t\t\tthis._spawnFunc(p, emitPosX, emitPosY, i);\n\t\t\t\t\t\t//initialize particle\n\t\t\t\t\t\tp.init();\n\t\t\t\t\t\t//update the particle by the time passed, so the particles are spread out properly\n\t\t\t\t\t\tp.update(-this._spawnTimer);//we want a positive delta, because a negative delta messes things up\n\t\t\t\t\t\t//add the particle to the display list\n\t\t\t\t\t\tif(!p.parent)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.addAtBack)\n\t\t\t\t\t\t\t\tthis._parent.addChildAt(p, 0);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tthis._parent.addChild(p);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//kind of hacky, but performance friendly\n\t\t\t\t\t\t\t//shuffle children to correct place\n\t\t\t\t\t\t\tlet children = this._parent.children;\n\t\t\t\t\t\t\t//avoid using splice if possible\n\t\t\t\t\t\t\tif(children[0] == p)\n\t\t\t\t\t\t\t\tchildren.shift();\n\t\t\t\t\t\t\telse if(children[children.length-1] == p)\n\t\t\t\t\t\t\t\tchildren.pop();\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet index = children.indexOf(p);\n\t\t\t\t\t\t\t\tchildren.splice(index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(this.addAtBack)\n\t\t\t\t\t\t\t\tchildren.unshift(p);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tchildren.push(p);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//add particle to list of active particles\n\t\t\t\t\t\tif(this._activeParticlesLast)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis._activeParticlesLast.next = p;\n\t\t\t\t\t\t\tp.prev = this._activeParticlesLast;\n\t\t\t\t\t\t\tthis._activeParticlesLast = p;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis._activeParticlesLast = this._activeParticlesFirst = p;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t++this.particleCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//increase timer and continue on to any other particles that need to be created\n\t\t\t\tthis._spawnTimer += this._frequency;\n\t\t\t}\n\t\t}\n\t\t//if the position changed before this update, then keep track of that\n\t\tif(this._posChanged)\n\t\t{\n\t\t\tthis._prevEmitterPos.x = curX;\n\t\t\tthis._prevEmitterPos.y = curY;\n\t\t\tthis._prevPosIsValid = true;\n\t\t\tthis._posChanged = false;\n\t\t}\n\n\t\t//if we are all done and should destroy ourselves, take care of that\n\t\tif (!this._emit && !this._activeParticlesFirst)\n\t\t{\n\t\t\tif (this._completeCallback)\n\t\t\t{\n\t\t\t\tconst cb = this._completeCallback;\n\t\t\t\tthis._completeCallback = null;\n\t\t\t\tcb();\n\t\t\t}\n\t\t\tif (this._destroyWhenComplete)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set additional properties to new particle.\n\t * Using on classes that extend from Emitter\n\t * @param p The particle\n\t */\n\tprotected applyAdditionalProperties(p: Particle) {\n\t}\n\n\t/**\n\t * Positions a particle for a point type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnPoint(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on\n\t\t//starting particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\n\t\t//drop the particle at the emitter's position\n\t\tp.position.x = emitPosX;\n\t\tp.position.y = emitPosY;\n\t}\n\n\t/**\n\t * Positions a particle for a rectangle type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnRect(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on starting\n\t\t//particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\n\t\t//place the particle at a random point in the rectangle\n\t\thelperPoint.x = Math.random() * this.spawnRect.width + this.spawnRect.x;\n\t\thelperPoint.y = Math.random() * this.spawnRect.height + this.spawnRect.y;\n\t\tif(this.rotation !== 0)\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\n\t\tp.position.x = emitPosX + helperPoint.x;\n\t\tp.position.y = emitPosY + helperPoint.y;\n\t}\n\n\t/**\n\t * Positions a particle for a circle type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnCircle(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on starting\n\t\t//particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n\t\t\t\t\t\tthis.minStartRotation + this.rotation;\n\t\t//place the particle at a random radius in the circle\n\t\thelperPoint.x = Math.random() * this.spawnCircle.radius;\n\t\thelperPoint.y = 0;\n\t\t//rotate the point to a random angle in the circle\n\t\tParticleUtils.rotatePoint(Math.random() * 360, helperPoint);\n\t\t//offset by the circle's center\n\t\thelperPoint.x += this.spawnCircle.x;\n\t\thelperPoint.y += this.spawnCircle.y;\n\t\t//rotate the point by the emitter's rotation\n\t\tif(this.rotation !== 0)\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\n\t\t//set the position, offset by the emitter's position\n\t\tp.position.x = emitPosX + helperPoint.x;\n\t\tp.position.y = emitPosY + helperPoint.y;\n\t}\n\n\t/**\n\t * Positions a particle for a ring type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnRing(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\tlet spawnCircle = this.spawnCircle;\n\t\t//set the initial rotation/direction of the particle based on starting\n\t\t//particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n\t\t\t\t\t\tthis.minStartRotation + this.rotation;\n\t\t//place the particle at a random radius in the ring\n\t\tif(spawnCircle.minRadius !== spawnCircle.radius)\n\t\t{\n\t\t\thelperPoint.x = Math.random() * (spawnCircle.radius - spawnCircle.minRadius) +\n\t\t\t\t\t\t\tspawnCircle.minRadius;\n\t\t}\n\t\telse\n\t\t\thelperPoint.x = spawnCircle.radius;\n\t\thelperPoint.y = 0;\n\t\t//rotate the point to a random angle in the circle\n\t\tlet angle = Math.random() * 360;\n\t\tp.rotation += angle;\n\t\tParticleUtils.rotatePoint(angle, helperPoint);\n\t\t//offset by the circle's center\n\t\thelperPoint.x += this.spawnCircle.x;\n\t\thelperPoint.y += this.spawnCircle.y;\n\t\t//rotate the point by the emitter's rotation\n\t\tif(this.rotation !== 0)\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\n\t\t//set the position, offset by the emitter's position\n\t\tp.position.x = emitPosX + helperPoint.x;\n\t\tp.position.y = emitPosY + helperPoint.y;\n\t}\n\n\t/**\n\t * Positions a particle for polygonal chain.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnPolygonalChain(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on starting\n\t\t//particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n\t\t\t\tthis.minStartRotation + this.rotation;\n\t\t// get random point on the polygon chain\n\t\tthis.spawnPolygonalChain.getRandomPoint(helperPoint);\n\t\t//rotate the point by the emitter's rotation\n\t\tif(this.rotation !== 0)\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\n\t\t//set the position, offset by the emitter's position\n\t\tp.position.x = emitPosX + helperPoint.x;\n\t\tp.position.y = emitPosY + helperPoint.y;\n\t}\n\n\t/**\n\t * Positions a particle for a burst type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave.\n\t */\n\tprotected _spawnBurst(p: Particle, emitPosX: number, emitPosY: number, i: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on spawn\n\t\t//angle and rotation of emitter\n\t\tif(this.particleSpacing === 0)\n\t\t\tp.rotation = Math.random() * 360;\n\t\telse\n\t\t\tp.rotation = this.angleStart + (this.particleSpacing * i) + this.rotation;\n\t\t//drop the particle at the emitter's position\n\t\tp.position.x = emitPosX;\n\t\tp.position.y = emitPosY;\n\t}\n\n\t/**\n\t * Kills all active particles immediately.\n\t */\n\tpublic cleanup()\n\t{\n\t\tlet particle, next;\n\t\tfor (particle = this._activeParticlesFirst; particle; particle = next)\n\t\t{\n\t\t\tnext = particle.next;\n\t\t\tthis.recycle(particle);\n\t\t\tif(particle.parent)\n\t\t\t\tparticle.parent.removeChild(particle);\n\t\t}\n\t\tthis._activeParticlesFirst = this._activeParticlesLast = null;\n\t\tthis.particleCount = 0;\n\t}\n\n\t/**\n\t * Destroys the emitter and all of its particles.\n\t */\n\tpublic destroy()\n\t{\n\t\t//make sure we aren't still listening to any tickers\n\t\tthis.autoUpdate = false;\n\t\t//puts all active particles in the pool, and removes them from the particle parent\n\t\tthis.cleanup();\n\t\t//wipe the pool clean\n\t\tlet next;\n\t\tfor (let particle = this._poolFirst; particle; particle = next)\n\t\t{\n\t\t\t//store next value so we don't lose it in our destroy call\n\t\t\tnext = particle.next;\n\t\t\tparticle.destroy();\n\t\t}\n\t\tthis._poolFirst = this._parent = this.particleImages = this.spawnPos = this.ownerPos =\n\t\t\tthis.startColor = this.startScale = this.startAlpha = this.startSpeed =\n\t\t\tthis.customEase = this._completeCallback = null;\n\t}\n}\n","import {Point} from 'pixi.js';\n\nexport interface BasicPoint\n{\n\tx: number;\n\ty: number;\n}\n\nexport interface Segment\n{\n\tp1: BasicPoint;\n\tp2: BasicPoint;\n\tl: number;\n}\n\n/**\n * Chain of line segments for generating spawn positions.\n */\nexport class PolygonalChain\n{\n\t/**\n\t * List of segment objects in the chain.\n\t */\n\tprivate segments:Segment[];\n\t/**\n\t * Total length of all segments of the chain.\n\t */\n\tprivate totalLength:number;\n\t/**\n\t * Total length of segments up to and including the segment of the same index.\n\t * Used for weighted random selection of segment.\n\t */\n\tprivate countingLengths:number[];\n\t\n\t/**\n\t * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\n\t */\n\tconstructor(data:BasicPoint[]|BasicPoint[][])\n\t{\n\t\tthis.segments = [];\n\t\tthis.countingLengths = [];\n\t\tthis.totalLength = 0;\n\t\tthis.init(data);\n\t}\n\t\n\t/**\n\t * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\n\t */\n\tprivate init(data:BasicPoint[]|BasicPoint[][])\n\t{\n\t\t// if data is not present, set up a segment of length 0\n\t\tif (!data || !data.length)\n\t\t{\n\t\t\tthis.segments.push({p1:{x:0, y:0}, p2:{x:0, y:0}, l:0});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (Array.isArray(data[0]))\n\t\t\t{\n\t\t\t\t// list of segment chains, each defined as a list of points\n\t\t\t\tfor (let i = 0; i < data.length; ++i)\n\t\t\t\t{\n\t\t\t\t\t// loop through the chain, connecting points\n\t\t\t\t\tconst chain = data[i] as BasicPoint[];\n\t\t\t\t\tlet prevPoint = chain[0] as BasicPoint;\n\t\t\t\t\tfor (let j = 1; j < chain.length; ++j)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst second = chain[j] as BasicPoint;\n\t\t\t\t\t\tthis.segments.push({p1: prevPoint, p2: second, l:0});\n\t\t\t\t\t\tprevPoint = second;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlet prevPoint = data[0] as BasicPoint;\n\t\t\t\t// list of points\n\t\t\t\tfor (let i = 1; i < data.length; ++i)\n\t\t\t\t{\n\t\t\t\t\tconst second = data[i] as BasicPoint;\n\t\t\t\t\tthis.segments.push({p1: prevPoint, p2: second, l:0});\n\t\t\t\t\tprevPoint = second;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// now go through our segments to calculate the lengths so that we\n\t\t// can set up a nice weighted random distribution\n\t\tfor (let i = 0; i < this.segments.length; ++i) {\n\t\t\tconst {p1, p2} = this.segments[i];\n\t\t\tconst segLength = Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\n\t\t\t// save length so we can turn a random number into a 0-1 interpolation value later\n\t\t\tthis.segments[i].l = segLength;\n\t\t\tthis.totalLength += segLength;\n\t\t\t// keep track of the length so far, counting up\n\t\t\tthis.countingLengths.push(this.totalLength);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets a random point in the chain.\n\t * @param out The point to store the selected position in.\n\t */\n\tpublic getRandomPoint(out:Point)\n\t{\n\t\t// select a random spot in the length of the chain\n\t\tconst rand = Math.random() * this.totalLength;\n\t\tlet chosenSeg:Segment;\n\t\tlet lerp:number;\n\t\t// if only one segment, it wins\n\t\tif (this.segments.length === 1)\n\t\t{\n\t\t\tchosenSeg = this.segments[0];\n\t\t\tlerp = rand;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// otherwise, go through countingLengths until we have determined\n\t\t\t// which segment we chose\n\t\t\tfor (let i = 0; i < this.countingLengths.length; ++i) {\n\t\t\t\tif (rand < this.countingLengths[i])\n\t\t\t\t{\n\t\t\t\t\tchosenSeg = this.segments[i];\n\t\t\t\t\t// set lerp equal to the length into that segment (i.e. the remainder after subtracting all the segments before it)\n\t\t\t\t\tlerp = i === 0 ? rand : rand - this.countingLengths[i - 1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// divide lerp by the segment length, to result in a 0-1 number.\n\t\tlerp /= chosenSeg.l || 1;\n\t\tconst {p1, p2} = chosenSeg;\n\t\t// now calculate the position in the segment that the lerp value represents\n\t\tout.x = p1.x + lerp * (p2.x - p1.x);\n\t\tout.y = p1.y + lerp * (p2.y - p1.y);\n\t}\n}","import {ParticleUtils} from \"./ParticleUtils\";\nimport {Particle} from \"./Particle\";\nimport {Emitter} from \"./Emitter\";\nimport {Point, Texture} from 'pixi.js';\n\n/**\n * A helper point for math things.\n * @hidden\n */\nconst helperPoint = new Point();\n\n/**\n * A hand picked list of Math functions (and a couple properties) that are\n * allowable. They should be used without the preceding \"Math.\"\n * @hidden\n */\nconst MATH_FUNCS =\n[\n\t\"pow\",\n\t\"sqrt\",\n\t\"abs\",\n\t\"floor\",\n\t\"round\",\n\t\"ceil\",\n\t\"E\",\n\t\"PI\",\n\t\"sin\",\n\t\"cos\",\n\t\"tan\",\n\t\"asin\",\n\t\"acos\",\n\t\"atan\",\n\t\"atan2\",\n\t\"log\"\n];\n/**\n * create an actual regular expression object from the string\n * @hidden\n */\nconst WHITELISTER = new RegExp(\n\t[\n\t\t//Allow the 4 basic operations, parentheses and all numbers/decimals, as well\n\t\t//as 'x', for the variable usage.\n\t\t\"[01234567890\\\\.\\\\*\\\\-\\\\+\\\\/\\\\(\\\\)x ,]\",\n\t].concat(MATH_FUNCS).join(\"|\"),\n\t\"g\"\n);\n\n/**\n * Parses a string into a function for path following.\n * This involves whitelisting the string for safety, inserting \"Math.\" to math function\n * names, and using `new Function()` to generate a function.\n * @hidden\n * @param pathString The string to parse.\n * @return The path function - takes x, outputs y.\n */\nconst parsePath = function(pathString: string)\n{\n\tlet matches = pathString.match(WHITELISTER);\n\tfor(let i = matches.length - 1; i >= 0; --i)\n\t{\n\t\tif(MATH_FUNCS.indexOf(matches[i]) >= 0)\n\t\t\tmatches[i] = \"Math.\" + matches[i];\n\t}\n\tpathString = matches.join(\"\");\n\treturn new Function(\"x\", \"return \"+ pathString + \";\");\n};\n\n/**\n * An particle that follows a path defined by an algebraic expression, e.g. \"sin(x)\" or\n * \"5x + 3\".\n * To use this class, the particle config must have a \"path\" string in the\n * \"extraData\" parameter. This string should have \"x\" in it to represent movement (from the\n * speed settings of the particle). It may have numbers, parentheses, the four basic\n * operations, and the following Math functions or properties (without the preceding \"Math.\"):\n * \"pow\", \"sqrt\", \"abs\", \"floor\", \"round\", \"ceil\", \"E\", \"PI\", \"sin\", \"cos\", \"tan\", \"asin\",\n * \"acos\", \"atan\", \"atan2\", \"log\".\n * The overall movement of the particle and the expression value become x and y positions for\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\n * the particle.\n *\n * Some example paths:\n *\n * \t\"sin(x/10) * 20\" // A sine wave path.\n * \t\"cos(x/100) * 30\" // Particles curve counterclockwise (for medium speed/low lifetime particles)\n * \t\"pow(x/10, 2) / 2\" // Particles curve clockwise (remember, +y is down).\n */\nexport class PathParticle extends Particle\n{\n\t/**\n\t * The function representing the path the particle should take.\n\t */\n\tpublic path: Function;\n\t/**\n\t * The initial rotation in degrees of the particle, because the direction of the path\n\t * is based on that.\n\t */\n\tpublic initialRotation: number;\n\t/**\n\t * The initial position of the particle, as all path movement is added to that.\n\t */\n\tpublic initialPosition: Point;\n\t/**\n\t * Total single directional movement, due to speed.\n\t */\n\tpublic movement: number;\n\t\n\t/**\n\t * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\n\t */\n\tconstructor(emitter: Emitter)\n\t{\n\t\tsuper(emitter);\n\t\tthis.path = null;\n\t\tthis.initialRotation = 0;\n\t\tthis.initialPosition = new Point();\n\t\tthis.movement = 0;\n\t}\n\n\t/**\n\t * Initializes the particle for use, based on the properties that have to\n\t * have been set already on the particle.\n\t */\n\tpublic init()\n\t{\n\t\t//get initial rotation before it is converted to radians\n\t\tthis.initialRotation = this.rotation;\n\t\t//standard init\n\t\tthis.Particle_init();\n\n\t\t//set the path for the particle\n\t\tthis.path = this.extraData.path;\n\t\t//cancel the normal movement behavior\n\t\tthis._doNormalMovement = !this.path;\n\t\t//reset movement\n\t\tthis.movement = 0;\n\t\t//grab position\n\t\tthis.initialPosition.x = this.position.x;\n\t\tthis.initialPosition.y = this.position.y;\n\t}\n\n\t/**\n\t * Updates the particle.\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t */\n\tpublic update(delta: number): number\n\t{\n\t\tconst lerp = this.Particle_update(delta);\n\t\t//if the particle died during the update, then don't bother\n\t\tif(lerp >= 0 && this.path)\n\t\t{\n\t\t\t//increase linear movement based on speed\n\t\t\tconst speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\n\t\t\tthis.movement += speed * delta;\n\t\t\t//set up the helper point for rotation\n\t\t\thelperPoint.x = this.movement;\n\t\t\thelperPoint.y = this.path(this.movement);\n\t\t\tParticleUtils.rotatePoint(this.initialRotation, helperPoint);\n\t\t\tthis.position.x = this.initialPosition.x + helperPoint.x;\n\t\t\tthis.position.y = this.initialPosition.y + helperPoint.y;\n\t\t}\n\t\treturn lerp;\n\t}\n\t\n\t/**\n\t * Destroys the particle, removing references and preventing future use.\n\t */\n\tpublic destroy()\n\t{\n\t\tthis.Particle_destroy();\n\t\tthis.path = this.initialPosition = null;\n\t}\n\n\t/**\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\n\t * modifications to prepare it ahead of time. This just runs Particle.parseArt().\n\t * @param art The array of art data. For Particle, it should be an array of\n\t *            Textures. Any strings in the array will be converted to\n\t *            Textures via Texture.fromImage().\n\t * @return The art, after any needed modifications.\n\t */\n\tpublic static parseArt(art: (Texture|string)[]):Texture[]\n\t{\n\t\treturn Particle.parseArt(art);\n\t}\n\n\t/**\n\t * Parses extra emitter data to ensure it is set up for this particle class.\n\t * PathParticle checks for the existence of path data, and parses the path data for use\n\t * by particle instances.\n\t * @param extraData The extra data from the particle config.\n\t * @return The parsed extra data.\n\t */\n\tpublic static parseData(extraData: {path:string})\n\t{\n\t\tlet output: any = {};\n\t\tif(extraData && extraData.path)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\toutput.path = parsePath(extraData.path);\n\t\t\t}\n\t\t\tcatch(e)\n\t\t\t{\n\t\t\t\tif(ParticleUtils.verbose)\n\t\t\t\t\tconsole.error(\"PathParticle: error in parsing path expression\");\n\t\t\t\toutput.path = null;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(ParticleUtils.verbose)\n\t\t\t\tconsole.error(\"PathParticle requires a path string in extraData!\");\n\t\t\toutput.path = null;\n\t\t}\n\t\treturn output;\n\t}\n}","import {Particle} from \"./Particle\";\nimport {Emitter} from \"./Emitter\";\nimport {Texture} from 'pixi.js';\n\nexport interface ParsedAnimatedParticleArt\n{\n\ttextures: Texture[];\n\tduration: number;\n\tframerate: number;\n\tloop: boolean;\n}\n\nexport interface AnimatedParticleArt\n{\n\tframerate: \"matchLife\"|number;\n\tloop?: boolean;\n\ttextures: (string|Texture|{texture:string|Texture,count:number})[];\n}\n\n/**\n * An individual particle image with an animation. Art data passed to the emitter must be\n * formatted in a particular way for AnimatedParticle to be able to handle it:\n *\n * ```typescript\n * {\n *     //framerate is required. It is the animation speed of the particle in frames per\n *     //second.\n *     //A value of \"matchLife\" causes the animation to match the lifetime of an individual\n *     //particle, instead of at a constant framerate. This causes the animation to play\n *     //through one time, completing when the particle expires.\n *     framerate: 6,\n *     //loop is optional, and defaults to false.\n *     loop: true,\n *     //textures is required, and can be an array of any (non-zero) length.\n *     textures: [\n *         //each entry represents a single texture that should be used for one or more\n *         //frames. Any strings will be converted to Textures with Texture.fromImage().\n *         //Instances of PIXI.Texture will be used directly.\n *         \"animFrame1.png\",\n *         //entries can be an object with a 'count' property, telling AnimatedParticle to\n *         //use that texture for 'count' frames sequentially.\n *         {\n *             texture: \"animFrame2.png\",\n *             count: 3\n *         },\n *         \"animFrame3.png\"\n *     ]\n * }\n * ```\n */\nexport class AnimatedParticle extends Particle\n{\n\t/**\n\t * Texture array used as each frame of animation, similarly to how MovieClip works.\n\t */\n\tprivate textures: Texture[];\n\n\t/**\n\t * Duration of the animation, in seconds.\n\t */\n\tprivate duration: number;\n\n\t/**\n\t * Animation framerate, in frames per second.\n\t */\n\tprivate framerate: number;\n\n\t/**\n\t * Animation time elapsed, in seconds.\n\t */\n\tprivate elapsed: number;\n\n\t/**\n\t * If this particle animation should loop.\n\t */\n\tprivate loop: boolean;\n\t\n\t/**\n\t * @param emitter The emitter that controls this AnimatedParticle.\n\t */\n\tconstructor(emitter: Emitter)\n\t{\n\t\tsuper(emitter);\n\n\t\tthis.textures = null;\n\t\tthis.duration = 0;\n\t\tthis.framerate = 0;\n\t\tthis.elapsed = 0;\n\t\tthis.loop = false;\n\t}\n\n\t/**\n\t * Initializes the particle for use, based on the properties that have to\n\t * have been set already on the particle.\n\t */\n\tpublic init()\n\t{\n\t\tthis.Particle_init();\n\n\t\tthis.elapsed = 0;\n\n\t\t//if the animation needs to match the particle's life, then cacluate variables\n\t\tif(this.framerate < 0)\n\t\t{\n\t\t\tthis.duration = this.maxLife;\n\t\t\tthis.framerate = this.textures.length / this.duration;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the textures for the particle.\n\t * @param art An array of PIXI.Texture objects for this animated particle.\n\t */\n\tpublic applyArt(art: ParsedAnimatedParticleArt)\n\t{\n\t\tthis.textures = art.textures;\n\t\tthis.framerate = art.framerate;\n\t\tthis.duration = art.duration;\n\t\tthis.loop = art.loop;\n\t}\n\n\t/**\n\t * Updates the particle.\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t */\n\tpublic update(delta: number): number\n\t{\n\t\tconst lerp = this.Particle_update(delta);\n\t\t//only animate the particle if it is still alive\n\t\tif(lerp >= 0)\n\t\t{\n\t\t\tthis.elapsed += delta;\n\t\t\tif(this.elapsed > this.duration)\n\t\t\t{\n\t\t\t\t//loop elapsed back around\n\t\t\t\tif(this.loop)\n\t\t\t\t\tthis.elapsed = this.elapsed % this.duration;\n\t\t\t\t//subtract a small amount to prevent attempting to go past the end of the animation\n\t\t\t\telse\n\t\t\t\t\tthis.elapsed = this.duration - 0.000001;\n\t\t\t}\n\t\t\t// add a very small number to the frame and then floor it to avoid\n\t\t\t// the frame being one short due to floating point errors.\n\t\t\tlet frame = (this.elapsed * this.framerate + 0.0000001) | 0;\n\t\t\tthis.texture = this.textures[frame] || Texture.EMPTY;\n\t\t}\n\t\treturn lerp;\n\t}\n\n\t/**\n\t * Destroys the particle, removing references and preventing future use.\n\t */\n\tpublic destroy()\n\t{\n\t\tthis.Particle_destroy();\n\t\tthis.textures = null;\n\t}\n\n\t/**\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\n\t * modifications to prepare it ahead of time.\n\t * @param art The array of art data, properly formatted for AnimatedParticle.\n\t * @return The art, after any needed modifications.\n\t */\n\tpublic static parseArt(art: AnimatedParticleArt[])\n\t{\n\t\tlet data, output: any, textures, tex, outTextures;\n\t\tlet outArr:ParsedAnimatedParticleArt[] = [];\n\t\tfor(let i = 0; i < art.length; ++i)\n\t\t{\n\t\t\tdata = art[i];\n\t\t\toutArr[i] = output = {} as ParsedAnimatedParticleArt;\n\t\t\toutput.textures = outTextures = [];\n\t\t\ttextures = data.textures;\n\t\t\tfor(let j = 0; j < textures.length; ++j)\n\t\t\t{\n\t\t\t\ttex = textures[j];\n\t\t\t\tif(typeof tex == \"string\")\n\t\t\t\t\toutTextures.push(Texture.fromImage(tex));\n\t\t\t\telse if(tex instanceof Texture)\n\t\t\t\t\toutTextures.push(tex);\n\t\t\t\t//assume an object with extra data determining duplicate frame data\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlet dupe = tex.count || 1;\n\t\t\t\t\tif(typeof tex.texture == \"string\")\n\t\t\t\t\t\ttex = Texture.fromImage(tex.texture);\n\t\t\t\t\telse// if(tex.texture instanceof Texture)\n\t\t\t\t\t\ttex = tex.texture;\n\t\t\t\t\tfor(; dupe > 0; --dupe)\n\t\t\t\t\t{\n\t\t\t\t\t\toutTextures.push(tex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//use these values to signify that the animation should match the particle life time.\n\t\t\tif(data.framerate == \"matchLife\")\n\t\t\t{\n\t\t\t\t//-1 means that it should be calculated\n\t\t\t\toutput.framerate = -1;\n\t\t\t\toutput.duration = 0;\n\t\t\t\toutput.loop = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//determine if the animation should loop\n\t\t\t\toutput.loop = !!data.loop;\n\t\t\t\t//get the framerate, default to 60\n\t\t\t\toutput.framerate = data.framerate > 0 ? data.framerate : 60;\n\t\t\t\t//determine the duration\n\t\t\t\toutput.duration = outTextures.length / output.framerate;\n\t\t\t}\n\t\t}\n\n\t\treturn outArr;\n\t}\n}"]}